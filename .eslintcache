[{"D:\\React-Project\\Demo-WorkWithForm\\src\\index.js":"1","D:\\React-Project\\Demo-WorkWithForm\\src\\App.js":"2","D:\\React-Project\\Demo-WorkWithForm\\src\\components\\SimpleInput.js":"3","D:\\React-Project\\Demo-WorkWithForm\\src\\Hooks\\use-input.js":"4","D:\\React-Project\\Demo-WorkWithForm\\src\\components\\BasicForm.js":"5"},{"size":142,"mtime":1616595887000,"results":"6","hashOfConfig":"7"},{"size":243,"mtime":1625672346751,"results":"8","hashOfConfig":"7"},{"size":4186,"mtime":1625672264161,"results":"9","hashOfConfig":"7"},{"size":806,"mtime":1625670733885,"results":"10","hashOfConfig":"7"},{"size":669,"mtime":1616595983000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p8t1s1",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React-Project\\Demo-WorkWithForm\\src\\index.js",[],"D:\\React-Project\\Demo-WorkWithForm\\src\\App.js",["25"],"D:\\React-Project\\Demo-WorkWithForm\\src\\components\\SimpleInput.js",["26","27","28"],"import { useEffect, useRef, useState } from \"react\";\n\nimport UseInput from \"../Hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    InputBlurHandler: nameBlurHandler,\n    rest: resetNameInput,\n  } = UseInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    InputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = UseInput(value => value.includes(\"@\"));\n  // const nameInputRef = useRef();\n\n  // const [enteredName, setEnteredName] = useState(\"\");\n  // // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // const [formIsValid , setFormIsValid] = useState(false);\n\n  // useEffect(() => {\n  //   if (enteredNameIsValid) {\n  //     console.log(\"Name Input is Valid!\");\n  //   }\n  // }, [enteredNameIsValid]);\n\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // // const enteredNameIsValid = enteredName.trim() !== \"\";\n  // // const nameInputIsInValid = !enteredNameIsValid && enteredNameTouched;\n\n  // const enteredEmailIsValid = enteredEmail.includes(\"@\");\n  // const enteredEmailIsInValid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  // we can remove this with let formIsValid because it introduce extra cycles of evaluation.\n\n  // useEffect(() =>{\n  //     if(enteredNameIsValid ){\n  //       setFormIsValid(true);\n  //     }else{\n  //       setFormIsValid(false);\n  //     }\n  // },[enteredNameIsValid]);\n\n  // const nameInputChangeHandler = (event) => {\n  //   setEnteredName(event.target.value);\n  //   // if (event.target.value.trim() !== \"\") {\n  //   //   setEnteredNameIsValid(true);\n  //   // }\n  // };\n\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  //   // if (enteredName.trim() !== \"\") {\n  //   //   setEnteredNameIsValid(true);\n  //   // }\n  // };\n\n  // const emailInputChangeHandler = (event) => {\n  //   setEnteredEmail(event.target.value);\n  // };\n\n  // const emailInputBlurHandler = (event) => {\n  //   setEnteredEmailTouched(true);\n  // };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    // setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    // const enteredValue = nameInputRef.current.value;\n    // console.log(enteredValue);\n\n    // nameInputRef.current.value=''; // => not ideal dont manipulate the dom.\n    resetNameInput();\n    resetEmailInput();\n\n    // setEnteredName(\"\");\n    // setEnteredNameTouched(false);\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control \";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          // Ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty . </p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your E-Mail</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Please enter a valid email.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n",["29","30"],"D:\\React-Project\\Demo-WorkWithForm\\src\\Hooks\\use-input.js",["31"],"import React, { useState } from \"react\";\r\n\r\nconst UseInput = (validateValue) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\r\n  const [isTouched, setIsTouched] = useState(false);\r\n\r\n  const valueIsValid = validateValue(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const InputBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };\r\n\r\n  const  reset = () =>{\r\n      setEnteredValue('');\r\n      setIsTouched(false);\r\n  };\r\n  return {\r\n    value: enteredValue,\r\n    isValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    InputBlurHandler,\r\n    reset\r\n  };\r\n};\r\n\r\nexport default UseInput;\r\n","D:\\React-Project\\Demo-WorkWithForm\\src\\components\\BasicForm.js",[],{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":19},{"ruleId":"32","severity":1,"message":"36","line":1,"column":10,"nodeType":"34","messageId":"35","endLine":1,"endColumn":19},{"ruleId":"32","severity":1,"message":"37","line":1,"column":21,"nodeType":"34","messageId":"35","endLine":1,"endColumn":27},{"ruleId":"32","severity":1,"message":"38","line":1,"column":29,"nodeType":"34","messageId":"35","endLine":1,"endColumn":37},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"32","severity":1,"message":"43","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":13},"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"'React' is defined but never used.","no-global-assign","no-unsafe-negation"]